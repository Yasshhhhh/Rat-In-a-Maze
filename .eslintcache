[{"D:\\Projects\\ratinamaze-main\\src\\index.js":"1","D:\\Projects\\ratinamaze-main\\src\\App.js":"2","D:\\Projects\\ratinamaze-main\\src\\reportWebVitals.js":"3","D:\\Projects\\ratinamaze-main\\src\\Maze.js":"4","D:\\Projects\\ratinamaze-main\\src\\Cell.js":"5"},{"size":500,"mtime":1608898222000,"results":"6","hashOfConfig":"7"},{"size":139,"mtime":1608898222000,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1608898222000,"results":"9","hashOfConfig":"7"},{"size":5833,"mtime":1687096810394,"results":"10","hashOfConfig":"7"},{"size":740,"mtime":1687090381978,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1hgemoz",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\Projects\\ratinamaze-main\\src\\index.js",[],["25","26"],"D:\\Projects\\ratinamaze-main\\src\\App.js",[],"D:\\Projects\\ratinamaze-main\\src\\reportWebVitals.js",[],"D:\\Projects\\ratinamaze-main\\src\\Maze.js",["27"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Cell from \"./Cell\";\nimport rat from \"./rat.png\";\nimport cheese from \"./cheese.png\";\nimport { Box } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nfunction Maze() {\n  const classes = useStyles();\n  let rows = 4;\n  let columns = 4;\n  let matrix = Array(rows)\n    .fill()\n    .map(() => Array(columns).fill(0));\n  // matrix[2][0] = 1;\n  // matrix[2][1] = 1;\n  matrix[2][2] = 1;\n  // matrix[1][0] = 1;\n  matrix[1][1] = 1;\n  // matrix[1][2] = 1;\n  // matrix[2][3] = 1;\n\n  let paths = calculatePaths(matrix, 0, 0, rows, columns);\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        <Box p={8}>\n          <Grid\n            style={{ backgroundColor: \"purple\" }}\n            container\n            justify=\"center\"\n          >\n            <Grid\n              key=\"0\"\n              style={{ backgroundColor: \"black\" }}\n              container\n              direction=\"row\"\n              spacing={0}\n              item\n              sm={3}\n            >\n              {loadCells(matrix, rows, columns, 0, [])}\n            </Grid>\n          </Grid>\n          <Grid\n            style={{ backgroundColor: \"purple\" }}\n            container\n            justify=\"center\"\n          >\n            <Typography gutterBottom variant=\"subtitle1\">\n              Initial Maze\n            </Typography>\n          </Grid>\n        </Box>\n        <Grid style={{ backgroundColor: \"purple\" }} container justify=\"center\">\n          <Typography gutterBottom variant=\"subtitle1\">\n            Total Paths = {paths.length}\n          </Typography>\n        </Grid>\n        {paths.map((path, index) => {\n          return (\n            <Grid\n              key={(index + 1).toString()}\n              style={{ backgroundColor: \"black\" }}\n              container\n              direction=\"row\"\n              spacing={0}\n              item\n              sm={3}\n            >\n              {loadCells(matrix, rows, columns, index + 1, path)}\n            </Grid>\n          );\n        })}\n      </Grid>\n    </div>\n  );\n}\n\nfunction calculatePaths(matrix, i, j, rows, columns) {\n  let pathCount = 0;\n  let paths = [];\n\n  let visited = Array(rows)\n    .fill()\n    .map(() => Array(columns).fill(0));\n  calculatePathsUtil(matrix, visited, i, j, rows, columns, []);\n  //   console.log(\"pathCount\", pathCount);\n  return paths;\n  function calculatePathsUtil(\n    matrix,\n    visited,\n    i,\n    j,\n    rows,\n    columns,\n    currentpath\n  ) {\n    // console.log(\"i\", i, \"j\", j);\n    if (i < 0 || i >= rows || j < 0 || j >= columns) return;\n    if (matrix[i][j] === 1 || visited[i][j] === 1) return;\n    if (i === rows - 1 && j === columns - 1) {\n      pathCount++;\n      //   console.log(\"found a path\");\n      paths.push([...currentpath]);\n      visited[i][j] = 0;\n      return;\n    }\n    visited[i][j] = 1;\n    //up\n    currentpath.push([i - 1, j]);\n    calculatePathsUtil(matrix, visited, i - 1, j, rows, columns, currentpath);\n    currentpath.pop();\n\n    //down\n    currentpath.push([i + 1, j]);\n    calculatePathsUtil(matrix, visited, i + 1, j, rows, columns, currentpath);\n    currentpath.pop();\n    //right\n    currentpath.push([i, j + 1]);\n    calculatePathsUtil(matrix, visited, i, j + 1, rows, columns, currentpath);\n    currentpath.pop();\n    //left\n    currentpath.push([i, j - 1]);\n    calculatePathsUtil(matrix, visited, i, j - 1, rows, columns, currentpath);\n    currentpath.pop();\n\n    visited[i][j] = 0;\n\n    return;\n  }\n}\n\nfunction loadCells(mat, rows, columns, gindex, path) {\n  //   console.log(path);\n  let matrix = Array(rows)\n    .fill()\n    .map(() => Array(columns).fill(0));\n  for (let i = 0; i < mat.length; i++) {\n    for (let j = 0; j < mat[0].length; j++) {\n      matrix[i][j] = mat[i][j];\n    }\n  }\n  path.forEach((cordinate) => {\n    // console.log(cordinate[0], cordinate[1]);\n    matrix[cordinate[0]][cordinate[1]] = 2;\n  });\n\n  //   console.log(matrix);\n\n  let cells = [];\n  matrix.forEach((rowEle, rindex) => {\n    rowEle.forEach((cval, cindex) => {\n      if (cval === 1) {\n        cells.push(\n          <Cell\n            key={gindex.toString() + rindex.toString() + cindex.toString()}\n            color=\"red\"\n          >\n            <Box height=\"50px\"></Box>\n          </Cell>\n        );\n      } else {\n        if (rindex === 0 && cindex === 0) {\n          cells.push(\n            <Cell\n              key={gindex.toString() + rindex.toString() + cindex.toString()}\n              color=\"white\"\n            >\n              <Box height=\"50px\">\n                <img style={{ width: \"100%\" }} alt=\"complex\" src={rat} />\n              </Box>{\" \"}\n            </Cell>\n          );\n        } else if (rindex === rows - 1 && cindex === columns - 1) {\n          cells.push(\n            <Cell\n              key={gindex.toString() + rindex.toString() + cindex.toString()}\n              color=\"white\"\n            >\n              <Box height=\"50px\">\n                <img style={{ width: \"100%\" }} alt=\"complex\" src={cheese} />\n              </Box>\n            </Cell>\n          );\n        } else if (matrix[rindex][cindex] === 2) {\n          cells.push(\n            <Cell\n              key={gindex.toString() + rindex.toString() + cindex.toString()}\n              color=\"green\"\n            >\n              <Box height=\"50px\" />\n            </Cell>\n          );\n        } else {\n          cells.push(\n            <Cell\n              key={gindex.toString() + rindex.toString() + cindex.toString()}\n              color=\"white\"\n            >\n              <Box height=\"50px\" />\n            </Cell>\n          );\n        }\n      }\n    });\n  });\n\n  return cells;\n}\n\nexport default Maze;\n","D:\\Projects\\ratinamaze-main\\src\\Cell.js",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":112,"column":7,"nodeType":"36","messageId":"37","endLine":112,"endColumn":16},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'pathCount' is assigned a value but never used.","Identifier","unusedVar",["40"],["41"],"no-global-assign","no-unsafe-negation"]